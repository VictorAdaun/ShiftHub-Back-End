generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model dbHealth {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")

  @@map("db_health")
}

model User {
  id                         String                       @id @default(uuid())
  email                      String                       @unique
  avatar                     String?
  firstName                  String                       @map("first_name")
  lastName                   String                       @map("last_name")
  fullName                   String                       @map("full_name")
  companyId                  String                       @map("company_id")
  roleId                     String                       @map("role_id")
  userType                   USER_TYPE                    @map("user_type")
  alternativeEmail           String?                      @map("alternative_email")
  emailVerified              Boolean                      @default(false) @map("email_verified")
  verificationCode           String?                      @unique @map("verification_code") @db.VarChar(200)
  verificationCodeCreatedAt  DateTime?                    @map("verification_code_created_at")
  password                   String?                      @db.VarChar(200)
  passwordToken              String?                      @unique @map("password_token") @db.VarChar(200)
  passwordTokenCreatedAt     DateTime?                    @map("password_token_created_at")
  isAdmin                    Boolean                      @default(false) @map("is_admin")
  isActive                   Boolean                      @default(false) @map("is_active")
  isBlacklisted              Boolean                      @default(false) @map("is_blacklisted")
  lastDayWorked              DateTime?                    @map("last_day_worked")

  deletedAt                  DateTime?                    @map("deleted_at")
  createdAt                  DateTime                     @default(now()) @map("created_at")
  updatedAt                  DateTime                     @default(now()) @map("updated_at")

  role                       CompanyRole                  @relation(fields: [roleId], references: [id])
  company                    Company                      @relation(fields: [companyId], references: [id])
  
  employeeTask               EmployeeTask[]
  securityQuestions          SecurityQuestions[]
  schedulePeriodAvailability SchedulePeriodAvailability[]
  userSchedulePeriod         UserSchedulePeriod[]
  schedulePeriod             SchedulePeriod[]
  task                       Task[]

  @@map("user")
}

model Company {
  id                String              @id @default(uuid())
  name              String
  address           String
  scheduleStartDay  DAY_OF_WEEK         @default(MONDAY) @map("schedule_start_day")

  deletedAt         DateTime?           @map("deleted_at")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @default(now()) @map("updated_at")

  companyDepartment CompanyDepartment[]
  companyRole       CompanyRole[]
  schedulePeriod    SchedulePeriod[]
  user              User[]
  task              Task[]

  @@map("company")
}

model CompanyDepartment {
  id              String        @id @default(uuid())
  companyId       String        @map("company_id")
  departmentTitle String        @map("department_title")

  deletedAt       DateTime?     @map("deleted_at")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @default(now()) @map("updated_at")

  company         Company       @relation(fields: [companyId], references: [id])

  companyRole     CompanyRole[]

  @@map("company_department")
}

model CompanyRole {
  id           String            @id @default(uuid())
  companyId    String            @map("company_id")
  departmentId String            @map("department_id")
  roleTitle    String            @map("role_title")

  deletedAt    DateTime?         @map("deleted_at")
  createdAt    DateTime          @default(now()) @map("created_at")
  updatedAt    DateTime          @default(now()) @map("updated_at")

  company      Company           @relation(fields: [companyId], references: [id])
  department   CompanyDepartment @relation(fields: [departmentId], references: [id])

  user         User[]

  @@map("company_role")
}

model SchedulePeriod {
  id                         String                       @id @default(uuid())
  ownerId                    String                       @map("owner_id")
  periodName                 String                       @map("period_name")
  companyId                  String                       @map("company_id")
  repeat                     Boolean                      @default(false)
  published                  Boolean                      @default(false)
  maxHoursBefore             Int                          @map("max_hours_before")
  maxHoursAfter              Int                          @map("max_hours_after")

  deletedAt                  DateTime?                    @map("deleted_at")
  createdAt                  DateTime                     @default(now()) @map("created_at")
  updatedAt                  DateTime                     @default(now()) @map("updated_at")

  user                       User                         @relation(fields: [ownerId], references: [id])
  company                    Company                      @relation(fields: [companyId], references: [id])

  schedulePeriodAvailability SchedulePeriodAvailability[]
  schedulePeriodDemand       SchedulePeriodDemand[]
  userSchedulePeriod         UserSchedulePeriod[]

  @@map("schedule_period")
}

model SchedulePeriodDemand {
  id                         String         @id @default(uuid())
  schedulePeriodId           String         @map("schedule_period_id")
  weekDay                    DAY_OF_WEEK
  timeFrame                  TIME_OF_DAY
  startTime                  String         @map("start_time")
  endTime                    String         @map("end_time")
  workerQuantity             Int            @map("worker_quantity")

  deletedAt                  DateTime?      @map("deleted_at")
  createdAt                  DateTime       @default(now()) @map("created_at")
  updatedAt                  DateTime       @default(now()) @map("updated_at")

  schedulePeriod             SchedulePeriod @relation(fields: [schedulePeriodId], references: [id])

  userSchedulePeriod         UserSchedulePeriod[]

  @@map("schedule_period_demand")
}

model UserSchedulePeriod {
  id                         String                   @id @default(uuid())
  userId                     String                   @map("user_id")
  schedulePeriodId           String                   @map("schedule_period_id")
  schedulePeriodDemandId     String                   @map("schedule_period_demand_id")
  week                       Int  
  year                       Int                      

  deletedAt                  DateTime?                @map("deleted_at")
  createdAt                  DateTime                 @default(now()) @map("created_at")
  updatedAt                  DateTime                 @default(now()) @map("updated_at")

  schedulePeriod             SchedulePeriod           @relation(fields: [schedulePeriodId], references: [id])
  schedulePeriodDemand       SchedulePeriodDemand     @relation(fields: [schedulePeriodDemandId], references: [id])
  user                       User                     @relation(fields: [userId], references: [id])

  @@map("user_schedule_period")
}


model SchedulePeriodAvailability {
  id                        String         @id @default(uuid())
  userId                    String         @map("user_id")
  schedulePeriodId          String         @map("schedule_period_id")
  timeOfDay                 TIME_OF_DAY
  weekDay                   DAY_OF_WEEK
  workDate                  DateTime       @default(now()) @map("work_date")
  fromHour                  Int            @map("from_hour")
  toHour                    Int            @map("to_hour")

  deletedAt                 DateTime?      @map("deleted_at")
  createdAt                 DateTime       @default(now()) @map("created_at")
  updatedAt                 DateTime       @default(now()) @map("updated_at")
  
  schedulePeriod            SchedulePeriod @relation(fields: [schedulePeriodId], references: [id])
  user                      User           @relation(fields: [userId], references: [id])

  @@map("schedule_period_availability")
}

model Task {
  id           String         @id @default(uuid())
  title        String
  description  String
  companyId    String         @map("company_id")
  userId       String         @map("user_id")
  isDraft      Boolean        @default(true) @map("is_draft")
  startDate    DateTime?      @map("start_date")
  endDate      DateTime?      @map("end_date")
  assignType   TASK_ASSIGNED? @map("assign_type")
  status       TASK_STATUS    @default(TO_DO)
  priority     PRIORITY       @default(MEDIUM)
  
  deletedAt    DateTime?      @map("deleted_at")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @default(now()) @map("updated_at")

  user         User           @relation(fields: [userId], references: [id])
  company      Company        @relation(fields: [companyId], references: [id])

  employeeTask EmployeeTask[]
  taskList     TaskList[]

  @@map("task")
}

model TaskList {
  id        String       @id @default(uuid())
  taskId    String       @map("task_id")
  note      String
  checked   Boolean      @default(false)

  
  deletedAt DateTime?     @map("deleted_at")
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @default(now()) @map("updated_at")

  task      Task     @relation(fields: [taskId], references: [id])

  @@map("task_list")
}

model EmployeeTask {
  id         String  @id @default(uuid())
  taskId     String  @map("task_id")
  userId     String  @map("user_id")
  isTaskLead Boolean @default(false) @map("is_task_lead")

  deletedAt       DateTime?     @map("deleted_at")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @default(now()) @map("updated_at")
  
  task       Task    @relation(fields: [taskId], references: [id])
  user       User    @relation(fields: [userId], references: [id])

  @@map("employee_task")
}

model SecurityQuestions {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  questionOne String?  @map("question_one")
  questionTwo String?  @map("question_two")
  answerOne   String?  @map("answer_one")
  answerTwo   String?  @map("answer_two")

  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @default(now()) @map("updated_at")

  user       User    @relation(fields: [userId], references: [id])

 @@map("security_questions")
}

enum TASK_STATUS {
  TO_DO
  COMPLETED
  OVERDUE
  IN_PROGRESS
}

enum TASK_ASSIGNED {
  SHIFT
  MEMBERS
}

enum PRIORITY {
  VERY_HIGH
  HIGH
  MEDIUM
  LOW
}

enum WORKER_TYPE {
  FULL_TIME
  PART_TIME
}

enum USER_TYPE {
  EMPLOYEE
  MANAGER
  ADMIN
}

enum DAY_OF_WEEK {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum TIME_OF_DAY {
  MORNING
  AFTERNOON
  EVENING
}